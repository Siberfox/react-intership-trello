{"version":3,"sources":["components/custom-popup/custom-popup.component.tsx","assets/comments.svg","components/comment-item/comment-item.component.tsx","components/comments-section/comments-section.component.tsx","components/description-section/description-section.component.tsx","components/card-title-section/card-title-section.component.tsx","components/card-options/card-options.component.tsx","components/card/card.component.tsx","assets/plus.svg","components/card-list/card-list.component.tsx","components/board/board.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomModal","show","onHide","setUserName","useState","inputValue","setInputValue","onSubmit","Modal","size","aria-labelledby","centered","backdrop","Header","closeButton","Title","id","Body","FormControl","aria-label","aria-describedby","placeholder","onChange","e","target","value","onKeyPress","key","autoFocus","Footer","Button","onClick","variant","CommentItem","name","text","columnId","cardId","commentId","username","inputNewComment","setInputNewComment","editCommentInput","setEditCommentInput","methods","useContext","MethodsContext","InputGroup","className","Append","editComment","alert","deleteComment","CommentsSection","comments","addNewComment","map","item","DescriptionSection","description","inputNewDescription","setInputNewDescription","editDescriptionInput","setEditDescriptionInput","deleteDescription","addNewDecription","CardTitleSection","cardName","columnName","inputNewCardName","setInputNewCardName","editCardNameInput","setEditCardNameInput","editCardName","deleteCard","CardOptions","stopPropagation","Card","setShow","length","src","Comments","alt","CardList","inputColumnName","setInputColumnName","inputNewCard","setInputNewCard","columnNameHidden","setColumnNameHidden","editColumnName","cards","i","Form","preventDefault","addNewCard","Group","controlId","Control","type","Plus","Board","data","React","createContext","undefined","App","user","setUser","modalShow","setModalShow","nanoid","boardData","setBoardData","useEffect","storageNameValue","localStorage","getItem","storageBoardValue","JSON","parse","setItem","stringify","Provider","newValue","push","card","filter","comment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09b6f29f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Modal, Button, FormControl } from \"react-bootstrap\";\n\ninterface modalProps {\n  show: boolean;\n  onHide: () => void;\n  setUserName: (value: string) => void;\n}\n\nconst CustomModal: React.FC<modalProps> = ({ show, onHide, setUserName }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const onSubmit = (): void => {\n    if (inputValue) {\n      onHide();\n      setUserName(inputValue);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"sm\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"static\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Как вас зовут?\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <FormControl\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder=\"Ваше имя...\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          autoFocus\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onSubmit} variant=\"success\">\n          Принять\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default CustomModal;\n","export default __webpack_public_path__ + \"static/media/comments.44398cb6.svg\";","import React, { useState, useContext } from \"react\";\n\nimport { FormControl, InputGroup, Button } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./comment-item.styles.scss\";\n\ninterface CommentItemProps {\n  name: string;\n  text: string;\n  columnId: string;\n  cardId: string;\n  commentId: string;\n  username: string;\n}\n\nconst CommentItem: React.FC<CommentItemProps> = ({\n  name,\n  text,\n  columnId,\n  cardId,\n  commentId,\n  username,\n}) => {\n  const [inputNewComment, setInputNewComment] = useState(\"\");\n  const [editCommentInput, setEditCommentInput] = useState(false);\n  const methods = useContext(MethodsContext);\n\n  const editComment = () => {\n    if (inputNewComment) {\n      methods?.editComment(columnId, cardId, commentId, inputNewComment);\n      setInputNewComment(\"\");\n    }\n    setEditCommentInput(false);\n  };\n\n  const commentHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewComment(e.target.value);\n  };\n\n  return (\n    <>\n      {editCommentInput ? (\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"basic-url\"\n            placeholder=\"Изменить комментарий...\"\n            aria-label=\"Изменить комментарий...\"\n            aria-describedby=\"basic-addon2\"\n            value={inputNewComment}\n            onChange={commentHandleChange}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-success\" onClick={editComment}>\n              Сохранить\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      ) : (\n        <li className=\"comments-item\">\n          <div className=\"comments-body\">\n            <h5>{name}</h5>\n            <p>{text}</p>\n          </div>\n\n          <div className=\"header__icons\">\n            <PencilFill\n              className=\"icon-edit\"\n              size={17}\n              onClick={() => {\n                username === name\n                  ? setEditCommentInput(true)\n                  : alert(\"Вы не можете изменять чужие сообщения\");\n              }}\n            />\n            <TrashFill\n              className=\"icon-delete\"\n              size={17}\n              onClick={() =>\n                username === name\n                  ? methods?.deleteComment(columnId, cardId, commentId)\n                  : alert(\"Вы не можете удалять чужие сообщения\")\n              }\n            />\n          </div>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default CommentItem;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal, Button, FormControl, InputGroup } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport CommentItem from \"../comment-item/comment-item.component\";\n\nimport \"./comments-section.styles.scss\";\n\ninterface CommentsSectionProps {\n  username: string;\n  cardId: string;\n  columnId: string;\n  comments: { name: string; text: string; id: string }[];\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({\n  cardId,\n  columnId,\n  comments,\n  username,\n}) => {\n  const [inputNewComment, setInputNewComment] = useState(\"\");\n  const methods = useContext(MethodsContext);\n\n  const addComment = () => {\n    if (inputNewComment) {\n      methods?.addNewComment(columnId, cardId, inputNewComment);\n      setInputNewComment(\"\");\n    }\n  };\n\n  const commentHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewComment(e.target.value);\n  };\n\n  return (\n    <Modal.Footer className=\"card-options__footer\">\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"Напишите новый комментарий...\"\n          aria-label=\"Напишите комментарий...\"\n          aria-describedby=\"basic-addon2\"\n          onChange={commentHandleChange}\n          value={inputNewComment}\n        />\n        <InputGroup.Append>\n          <Button variant=\"outline-success\" onClick={addComment}>\n            Сохранить\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <ul className=\"comments-list\">\n        {comments.map((item) => {\n          return (\n            <CommentItem\n              key={item.id}\n              name={item.name}\n              text={item.text}\n              cardId={cardId}\n              columnId={columnId}\n              commentId={item.id}\n              username={username}\n            />\n          );\n        })}\n      </ul>\n    </Modal.Footer>\n  );\n};\n\nexport default CommentsSection;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal, Button, FormControl, InputGroup } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./description-section.styles.scss\";\n\ninterface DescriptionSectionProps {\n  cardId: string;\n  columnId: string;\n  description: string;\n}\n\nconst DescriptionSection: React.FC<DescriptionSectionProps> = ({\n  cardId,\n  columnId,\n  description,\n}) => {\n  const [inputNewDescription, setInputNewDescription] = useState(\"\");\n  const [editDescriptionInput, setEditDescriptionInput] = useState(false);\n  const methods = useContext(MethodsContext);\n\n  const addDescription = () => {\n    if (inputNewDescription) {\n      methods?.addNewDecription(columnId, cardId, inputNewDescription);\n      setInputNewDescription(\"\");\n    }\n    setEditDescriptionInput(false);\n  };\n\n  const descriptionHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewDescription(e.target.value);\n  };\n\n  return (\n    <Modal.Body className=\"card-options__body\">\n      <div className=\"description-title\">\n        <h3>Описание </h3>\n        <div className=\"header__icons\">\n          <PencilFill\n            className=\"icon-edit\"\n            size={17}\n            onClick={() => setEditDescriptionInput(true)}\n          />\n          <TrashFill\n            className=\"icon-delete\"\n            size={17}\n            onClick={() => methods?.deleteDescription(columnId, cardId)}\n          />\n        </div>\n      </div>\n\n      {description && !editDescriptionInput ? (\n        <>\n          <p>{description}</p>\n        </>\n      ) : (\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"basic-url\"\n            placeholder=\"Добавить описание...\"\n            aria-label=\"Добавить описание...\"\n            aria-describedby=\"basic-addon2\"\n            onChange={descriptionHandleChange}\n            value={inputNewDescription}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-success\" onClick={addDescription}>\n              Сохранить\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )}\n    </Modal.Body>\n  );\n};\n\nexport default DescriptionSection;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal, FormControl, InputGroup, Button } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./card-title-sectin.styles.scss\";\n\ninterface CardTitleSectionProps {\n  cardName: string;\n  cardId: string;\n  columnId: string;\n  columnName: string;\n  username: string;\n}\n\nconst CardTitleSection: React.FC<CardTitleSectionProps> = ({\n  cardName,\n  cardId,\n  columnId,\n  columnName,\n  username,\n}) => {\n  const [inputNewCardName, setInputNewCardName] = useState(\"\");\n  const [editCardNameInput, setEditCardNameInput] = useState(false);\n  const methods = useContext(MethodsContext);\n\n  const addDescription = () => {\n    if (inputNewCardName) {\n      methods?.editCardName(columnId, cardId, inputNewCardName);\n      setInputNewCardName(\"\");\n    }\n    setEditCardNameInput(false);\n  };\n\n  const cardNameHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewCardName(e.target.value);\n  };\n\n  return (\n    <Modal.Header closeButton>\n      <Modal.Title\n        id=\"contained-modal-title-vcenter\"\n        className=\"header__container\"\n      >\n        {editCardNameInput ? (\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              id=\"basic-url\"\n              placeholder=\"Изменить название...\"\n              aria-label=\"Изменить название...\"\n              aria-describedby=\"basic-addon2\"\n              onChange={cardNameHandleChange}\n              value={inputNewCardName}\n            />\n            <InputGroup.Append>\n              <Button variant=\"outline-success\" onClick={addDescription}>\n                Сохранить\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        ) : (\n          <>\n            <p>\n              {columnName} &gt; {cardName}\n            </p>\n            <div className=\"header__icons\">\n              <PencilFill\n                className=\"icon-edit\"\n                size={20}\n                onClick={() => setEditCardNameInput(true)}\n              />\n              <TrashFill\n                className=\"icon-delete\"\n                size={20}\n                onClick={() => {\n                  methods?.deleteCard(columnId, cardId);\n                }}\n              />\n            </div>\n          </>\n        )}\n      </Modal.Title>\n    </Modal.Header>\n  );\n};\n\nexport default CardTitleSection;\n","import React from \"react\";\n\nimport { Modal } from \"react-bootstrap\";\n\nimport CommentsSection from \"../comments-section/comments-section.component\";\nimport DescriptionSection from \"../description-section/description-section.component\";\nimport CardTitleSection from \"../card-title-section/card-title-section.component\";\n\nimport \"./card-options.styles.scss\";\n\ninterface CardOptionsProps {\n  username: string;\n  cardName: string;\n  cardId: string;\n  columnId: string;\n  description: string;\n  columnName: string;\n  comments: { name: string; text: string; id: string }[];\n  show: boolean;\n  onHide: () => void;\n}\n\nconst CardOptions: React.FC<CardOptionsProps> = ({\n  cardName,\n  show,\n  onHide,\n  description,\n  columnName,\n  comments,\n  cardId,\n  columnId,\n  username,\n}) => {\n  return (\n    <div onClick={(e) => e.stopPropagation()}>\n      <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <CardTitleSection\n          cardId={cardId}\n          columnId={columnId}\n          cardName={cardName}\n          columnName={columnName}\n          username={username}\n        />\n        <DescriptionSection\n          description={description}\n          cardId={cardId}\n          columnId={columnId}\n        />\n        <CommentsSection\n          comments={comments}\n          cardId={cardId}\n          columnId={columnId}\n          username={username}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default CardOptions;\n","import React, { useState } from \"react\";\n\nimport Comments from \"../../assets/comments.svg\";\nimport CardOptions from \"../card-options/card-options.component\";\n\nimport \"./card.styles.scss\";\n\ninterface CardProps {\n  username: string;\n  cardName: string;\n  cardId: string;\n  columnName: string;\n  columnId: string;\n  description: string;\n  comments: { name: string; text: string; id: string }[];\n}\n\nconst Card: React.FC<CardProps> = ({\n  cardName,\n  comments,\n  description,\n  columnName,\n  cardId,\n  columnId,\n  username,\n}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <div className=\"card__wrapper\" onClick={handleShow}>\n      <p>{cardName}</p>\n\n      {comments.length ? (\n        <div className=\"comments-icon\">\n          <img src={Comments} alt=\"comments\" />\n          <p className=\"comments-icon__text\">{comments.length}</p>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <CardOptions\n        cardName={cardName}\n        columnName={columnName}\n        show={show}\n        onHide={handleClose}\n        description={description}\n        comments={comments}\n        columnId={columnId}\n        cardId={cardId}\n        username={username}\n      />\n    </div>\n  );\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/plus.05989119.svg\";","import React, { useState, useContext } from \"react\";\n\nimport { FormControl, Form, Button } from \"react-bootstrap\";\n\nimport Card from \"../card/card.component\";\nimport { MethodsContext } from \"../../App\";\n\nimport \"./card-list.styles.scss\";\nimport Plus from \"../../assets/plus.svg\";\n\ninterface CardProps {\n  username: string;\n  item: {\n    id: string;\n    columnName: string;\n    cards: {\n      id: string;\n      cardName: string;\n      description: string;\n      comments: { name: string; text: string; id: string }[];\n    }[];\n  };\n}\n\nconst CardList: React.FC<CardProps> = ({ item, username }) => {\n  const [show, setShow] = useState(false);\n  const [inputColumnName, setInputColumnName] = useState(\"\");\n  const [inputNewCard, setInputNewCard] = useState(\"\");\n  const [columnNameHidden, setColumnNameHidden] = useState(false);\n\n  const methods = useContext(MethodsContext);\n\n  const hideColumnName = (): void => {\n    setColumnNameHidden(true);\n  };\n\n  const showColumnName = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      setColumnNameHidden(false);\n      if (inputColumnName) {\n        methods?.editColumnName(item.id, inputColumnName);\n      }\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputColumnName(e.target.value);\n  };\n\n  const showNewCardInput = (): void => {\n    setShow(true);\n  };\n\n  const newCardHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (inputNewCard) {\n      methods?.addNewCard(item.id, inputNewCard);\n      setInputNewCard(\"\");\n      setShow(false);\n    }\n    setShow(false);\n  };\n\n  const NewCardHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewCard(e.target.value);\n  };\n\n  return (\n    <div className=\"card-list__wrapper\">\n      {columnNameHidden ? (\n        <FormControl\n          autoFocus\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder={item.columnName}\n          onChange={handleChange}\n          onKeyPress={showColumnName}\n        />\n      ) : (\n        <h4 onClick={hideColumnName}>{item.columnName}</h4>\n      )}\n\n      {item.cards.map(\n        (i: {\n          id: string;\n          cardName: string;\n          description: string;\n          comments: { name: string; text: string; id: string }[];\n        }) => {\n          return (\n            <Card\n              key={i.id}\n              cardName={i.cardName}\n              description={i.description}\n              comments={i.comments}\n              columnName={item.columnName}\n              columnId={item.id}\n              cardId={i.id}\n              username={username}\n            />\n          );\n        }\n      )}\n\n      {show ? (\n        <Form onSubmit={newCardHandler} className=\"card-list__form\">\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Заголовок карточки\"\n              autoFocus\n              onChange={NewCardHandleChange}\n            />\n          </Form.Group>\n          <Button variant=\"success\" type=\"submit\">\n            Добавить карточку\n          </Button>\n        </Form>\n      ) : (\n        <button className=\"card-list__new-card\" onClick={showNewCardInput}>\n          <img src={Plus} alt=\"plus\" />\n          Добавить карточку\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nimport CardList from \"../card-list/card-list.component\";\nimport Plus from \"../../assets/plus.svg\";\n\nimport \"./board.styles.scss\";\n\ninterface BoardProps {\n  username: string;\n  data: {\n    id: string;\n    columnName: string;\n    cards: {\n      id: string;\n      cardName: string;\n      description: string;\n      comments: { name: string; text: string; id: string }[];\n    }[];\n  }[];\n}\n\nconst Board: React.FC<BoardProps> = ({ username, data }) => {\n  return (\n    <div className=\"board__wrapper\">\n      {data.map((item) => {\n        return <CardList key={item.id} item={item} username={username} />;\n      })}\n\n      <div className=\"board__new-card\">\n        <img src={Plus} alt=\"plus\" />\n        Добавить еще одну колонку\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport CustomModal from \"./components/custom-popup/custom-popup.component\";\nimport Board from \"./components/board/board.component\";\n\nimport \"./App.css\";\n\ninterface MethodsContextInterface {\n  editColumnName: (id: string, newValue: string) => void;\n  addNewCard: (id: string, newValue: string) => void;\n  addNewComment: (columnId: string, cardId: string, value: string) => void;\n  addNewDecription: (columnId: string, cardId: string, value: string) => void;\n  deleteDescription: (columnId: string, cardId: string) => void;\n  editCardName: (columnId: string, cardId: string, newValue: string) => void;\n  deleteCard: (columnId: string, cardId: string) => void;\n  editComment: (\n    columnId: string,\n    cardId: string,\n    commentId: string,\n    newValue: string\n  ) => void;\n  deleteComment: (columnId: string, cardId: string, commentId: string) => void;\n}\n\nexport const MethodsContext = React.createContext<\n  MethodsContextInterface | undefined\n>(undefined);\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState(\"\");\n  const [modalShow, setModalShow] = useState(true);\n\n  const [boardData, setBoardData] = useState([\n    {\n      id: nanoid(),\n      columnName: \"TODO\",\n      cards: [\n        {\n          cardName: \"create page\",\n          id: nanoid(),\n          description: `Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consectetur repellendus, nesciunt similique ratione neque aspernatur consequatur veniam exercitationem nostrum quo laborum ipsa, esse nihil pariatur. Ex quasi explicabo fugit unde.`,\n          comments: [\n            { name: \"Jessy\", text: \"LOL\", id: nanoid() },\n            {\n              name: \"Nancy\",\n              text: \"Is this lorem ipsum??? Where is real description?\",\n              id: nanoid(),\n            },\n          ],\n        },\n        {\n          cardName: \"add feature\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n        { cardName: \"deploy\", id: nanoid(), description: \"\", comments: [] },\n      ],\n    },\n    {\n      id: nanoid(),\n      columnName: \"In Progress\",\n      cards: [\n        {\n          cardName: \"design for new page\",\n          id: nanoid(),\n          description: \"\",\n          comments: [\n            {\n              name: \"Michael Scott\",\n              text: \"NO... no no no please no\",\n              id: nanoid(),\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: nanoid(),\n      columnName: \"Testing\",\n      cards: [\n        {\n          cardName: \"write unit tests\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n        {\n          cardName: \"hand testing\",\n          id: nanoid(),\n          description: \"\",\n          comments: [{ name: \"Chief\", text: \"good luck!\", id: nanoid() }],\n        },\n      ],\n    },\n    {\n      id: nanoid(),\n      columnName: \"Done\",\n      cards: [\n        {\n          cardName: \"create architecture\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n      ],\n    },\n  ]);\n\n  useEffect(() => {\n    let storageNameValue = localStorage.getItem(\"username\");\n    if (storageNameValue) {\n      setUser(storageNameValue);\n    }\n    let storageBoardValue = localStorage.getItem(\"board\");\n    if (storageBoardValue) {\n      setBoardData(JSON.parse(storageBoardValue));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"board\", JSON.stringify(boardData));\n  }, [boardData]);\n\n  const setUserName = (value: string): void => {\n    setUser(value);\n    localStorage.setItem(\"username\", value);\n  };\n\n  const editColumnName = (id: string, newValue: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === id) {\n          item.columnName = newValue;\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewCard = (id: string, newValue: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === id) {\n          item.cards.push({\n            cardName: newValue,\n            id: nanoid(),\n            description: \"\",\n            comments: [],\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const editCardName = (\n    columnId: string,\n    cardId: string,\n    newValue: string\n  ): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.cardName = newValue;\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const editComment = (\n    columnId: string,\n    cardId: string,\n    commentId: string,\n    newValue: string\n  ): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.comments.map((comment) => {\n                if (comment.id === commentId) {\n                  comment.text = newValue;\n                }\n                return comment;\n              });\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewComment = (\n    columnId: string,\n    cardId: string,\n    value: string\n  ): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.comments.push({ name: user, text: value, id: nanoid() });\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewDecription = (\n    columnId: string,\n    cardId: string,\n    value: string\n  ) => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.description = value;\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const deleteDescription = (columnId: string, cardId: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.description = \"\";\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const deleteCard = (columnId: string, cardId: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards = item.cards.filter((card) => card.id !== cardId);\n        }\n        return item;\n      })\n    );\n  };\n\n  const deleteComment = (\n    columnId: string,\n    cardId: string,\n    commentId: string\n  ): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.comments = card.comments.filter(\n                (comment) => comment.id !== commentId\n              );\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {user ? (\n        <MethodsContext.Provider\n          value={{\n            editColumnName,\n            addNewCard,\n            addNewComment,\n            addNewDecription,\n            deleteDescription,\n            editCardName,\n            deleteCard,\n            editComment,\n            deleteComment,\n          }}\n        >\n          <Board username={user} data={boardData} />\n        </MethodsContext.Provider>\n      ) : (\n        <CustomModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          setUserName={setUserName}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}