{"version":3,"sources":["components/name-modal/name-modal.tsx","assets/comments.svg","components/comment/comment.tsx","components/comments-section/comments-section.tsx","components/description-section/description-section.tsx","components/card-title-section/card-title-section.tsx","components/card-popup/card-popup.tsx","components/card/card.tsx","assets/plus.svg","components/card-list/card-list.tsx","components/board/board.tsx","data.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NameModal","show","onHide","setUserName","useState","inputValue","setInputValue","onSubmit","Modal","size","aria-labelledby","centered","backdrop","Header","closeButton","Title","id","Body","FormControl","aria-label","aria-describedby","placeholder","onChange","e","target","value","onKeyPress","key","autoFocus","Footer","Button","onClick","variant","Comment","name","text","commentId","username","newComment","setNewComment","editCommentInput","setEditCommentInput","methods","useContext","MethodsContext","InputGroup","className","Append","editComment","alert","deleteComment","CommentsSection","cardId","comments","addNewComment","filter","item","map","DescriptionSection","description","newDescription","setNewDescription","editDescription","setEditDescription","deleteDescription","addNewDecription","CardTitleSection","cardName","columnName","author","newCardName","setNewCardName","editCardName","setEditCardName","deleteCard","CardPopup","isShow","stopPropagation","Card","card","setIsShow","src","Comments","alt","CardList","cards","setColumnName","newCard","setNewCard","columnNameHidden","setColumnNameHidden","currentCards","columnId","editColumnName","Form","preventDefault","addNewCard","Group","controlId","Control","type","Plus","Board","columns","Columns","Cards","React","createContext","undefined","App","user","setUser","modalShow","setModalShow","setColumns","setCards","setComments","useEffect","storageNameValue","localStorage","getItem","storageColumnsValue","JSON","parse","storageCardsValue","storageCommentsValue","setItem","stringify","Provider","newValue","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3808e1c5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Modal, Button, FormControl } from \"react-bootstrap\";\n\ninterface modalProps {\n  show: boolean;\n  onHide: () => void;\n  setUserName: (value: string) => void;\n}\n\nconst NameModal: React.FC<modalProps> = ({ show, onHide, setUserName }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const onSubmit = (): void => {\n    if (inputValue) {\n      onHide();\n      setUserName(inputValue);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"sm\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"static\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Как вас зовут?\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <FormControl\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder=\"Ваше имя...\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          autoFocus\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onSubmit} variant=\"success\">\n          Принять\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default NameModal;\n","export default __webpack_public_path__ + \"static/media/comments.44398cb6.svg\";","import React, { useState, useContext } from \"react\";\n\nimport { FormControl, InputGroup, Button } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./comment.styles.scss\";\n\ninterface CommentProps {\n  name: string;\n  text: string;\n  commentId: number;\n  username: string;\n}\n\nconst Comment: React.FC<CommentProps> = ({\n  name,\n  text,\n  commentId,\n  username,\n}) => {\n  const [newComment, setNewComment] = useState(\"\");\n  const [editCommentInput, setEditCommentInput] = useState(false);\n  const methods = useContext(MethodsContext);\n\n  const editComment = () => {\n    if (newComment) {\n      methods?.editComment(commentId, newComment);\n      setNewComment(\"\");\n    }\n    setEditCommentInput(false);\n  };\n\n  const commentHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setNewComment(e.target.value);\n  };\n\n  return (\n    <>\n      {editCommentInput ? (\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"basic-url\"\n            placeholder=\"Изменить комментарий...\"\n            aria-label=\"Изменить комментарий...\"\n            aria-describedby=\"basic-addon2\"\n            value={newComment}\n            onChange={commentHandleChange}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-success\" onClick={editComment}>\n              Сохранить\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      ) : (\n        <li className=\"comments-item\">\n          <div className=\"comments-body\">\n            <h5>{name}</h5>\n            <p>{text}</p>\n          </div>\n\n          <div className=\"header__icons\">\n            <PencilFill\n              className=\"icon-edit\"\n              size={17}\n              onClick={() => {\n                username === name\n                  ? setEditCommentInput(true)\n                  : alert(\"Вы не можете изменять чужие сообщения\");\n              }}\n            />\n            <TrashFill\n              className=\"icon-delete\"\n              size={17}\n              onClick={() =>\n                username === name\n                  ? methods?.deleteComment(commentId)\n                  : alert(\"Вы не можете удалять чужие сообщения\")\n              }\n            />\n          </div>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default Comment;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal, Button, FormControl, InputGroup } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport Comment from \"../comment/comment\";\n\nimport \"./comments-section.styles.scss\";\n\ninterface CommentsSectionProps {\n  username: string;\n  cardId: number;\n  comments: {\n    id: number;\n    cardId: number;\n    name: string;\n    text: string;\n  }[];\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({\n  cardId,\n  username,\n  comments,\n}) => {\n  const [newComment, setNewComment] = useState(\"\");\n  const methods = useContext(MethodsContext);\n\n  const addComment = () => {\n    if (newComment) {\n      methods?.addNewComment(cardId, newComment);\n      setNewComment(\"\");\n    }\n  };\n\n  const commentHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setNewComment(e.target.value);\n  };\n\n  return (\n    <Modal.Footer className=\"card-options__footer\">\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"Напишите новый комментарий...\"\n          aria-label=\"Напишите комментарий...\"\n          aria-describedby=\"basic-addon2\"\n          onChange={commentHandleChange}\n          value={newComment}\n        />\n        <InputGroup.Append>\n          <Button variant=\"outline-success\" onClick={addComment}>\n            Сохранить\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <ul className=\"comments-list\">\n        {comments\n          .filter((item) => item.cardId === cardId)\n          .map((item) => {\n            return (\n              <Comment\n                key={item.id}\n                name={item.name}\n                text={item.text}\n                commentId={item.id}\n                username={username}\n              />\n            );\n          })}\n      </ul>\n    </Modal.Footer>\n  );\n};\n\nexport default CommentsSection;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal, Button, FormControl, InputGroup } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./description-section.styles.scss\";\n\ninterface DescriptionSectionProps {\n  cardId: number;\n  description: string;\n}\n\nconst DescriptionSection: React.FC<DescriptionSectionProps> = ({\n  cardId,\n  description,\n}) => {\n  const [newDescription, setNewDescription] = useState(\"\");\n  const [editDescription, setEditDescription] = useState(false);\n  const methods = useContext(MethodsContext);\n\n  const addDescription = () => {\n    if (newDescription) {\n      methods?.addNewDecription(cardId, newDescription);\n      setNewDescription(\"\");\n    }\n    setEditDescription(false);\n  };\n\n  const descriptionHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setNewDescription(e.target.value);\n  };\n\n  return (\n    <Modal.Body className=\"card-options__body\">\n      <div className=\"description-title\">\n        <h3>Описание </h3>\n        <div className=\"header__icons\">\n          <PencilFill\n            className=\"icon-edit\"\n            size={17}\n            onClick={() => setEditDescription(true)}\n          />\n          <TrashFill\n            className=\"icon-delete\"\n            size={17}\n            onClick={() => methods?.deleteDescription(cardId)}\n          />\n        </div>\n      </div>\n\n      {description && !editDescription ? (\n        <>\n          <p>{description}</p>\n        </>\n      ) : (\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"basic-url\"\n            placeholder=\"Добавить описание...\"\n            aria-label=\"Добавить описание...\"\n            aria-describedby=\"basic-addon2\"\n            onChange={descriptionHandleChange}\n            value={newDescription}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-success\" onClick={addDescription}>\n              Сохранить\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )}\n    </Modal.Body>\n  );\n};\n\nexport default DescriptionSection;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal, FormControl, InputGroup, Button } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./card-title-sectin.styles.scss\";\n\ninterface CardTitleSectionProps {\n  cardName: string;\n  cardId: number;\n  columnName: string;\n  author: string;\n}\n\nconst CardTitleSection: React.FC<CardTitleSectionProps> = ({\n  cardName,\n  cardId,\n  columnName,\n  author,\n}) => {\n  const [newCardName, setNewCardName] = useState(\"\");\n  const [editCardName, setEditCardName] = useState(false);\n  const methods = useContext(MethodsContext);\n\n  const addDescription = () => {\n    if (newCardName) {\n      methods?.editCardName(cardId, newCardName);\n      setNewCardName(\"\");\n    }\n    setEditCardName(false);\n  };\n\n  const cardNameHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setNewCardName(e.target.value);\n  };\n\n  return (\n    <Modal.Header closeButton>\n      <Modal.Title\n        id=\"contained-modal-title-vcenter\"\n        className=\"header__container\"\n      >\n        {editCardName ? (\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              id=\"basic-url\"\n              placeholder=\"Изменить название...\"\n              aria-label=\"Изменить название...\"\n              aria-describedby=\"basic-addon2\"\n              onChange={cardNameHandleChange}\n              value={newCardName}\n            />\n            <InputGroup.Append>\n              <Button variant=\"outline-success\" onClick={addDescription}>\n                Сохранить\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        ) : (\n          <>\n            <p>\n              {columnName} &gt; {cardName}\n              <small>({author})</small>\n            </p>\n            <div className=\"header__icons\">\n              <PencilFill\n                className=\"icon-edit\"\n                size={20}\n                onClick={() => setEditCardName(true)}\n              />\n              <TrashFill\n                className=\"icon-delete\"\n                size={20}\n                onClick={() => {\n                  methods?.deleteCard(cardId);\n                }}\n              />\n            </div>\n          </>\n        )}\n      </Modal.Title>\n    </Modal.Header>\n  );\n};\n\nexport default CardTitleSection;\n","import React from \"react\";\n\nimport { Modal } from \"react-bootstrap\";\n\nimport CommentsSection from \"../comments-section/comments-section\";\nimport DescriptionSection from \"../description-section/description-section\";\nimport CardTitleSection from \"../card-title-section/card-title-section\";\n\nimport \"./card-popup.styles.scss\";\n\ninterface CardPopupProps {\n  username: string;\n  cardName: string;\n  cardId: number;\n  author: string;\n  description: string;\n  columnName: string;\n  isShow: boolean;\n  onHide: () => void;\n  comments: {\n    id: number;\n    cardId: number;\n    name: string;\n    text: string;\n  }[];\n}\n\nconst CardPopup: React.FC<CardPopupProps> = ({\n  cardName,\n  isShow,\n  onHide,\n  description,\n  columnName,\n  cardId,\n  username,\n  comments,\n  author,\n}) => {\n  return (\n    <div onClick={(e) => e.stopPropagation()}>\n      <Modal\n        show={isShow}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <CardTitleSection\n          cardId={cardId}\n          cardName={cardName}\n          columnName={columnName}\n          author={author}\n        />\n        <DescriptionSection description={description} cardId={cardId} />\n        <CommentsSection\n          cardId={cardId}\n          username={username}\n          comments={comments}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default CardPopup;\n","import React, { useState } from \"react\";\n\nimport Comments from \"../../assets/comments.svg\";\nimport CardPopup from \"../card-popup/card-popup\";\n\nimport \"./card.styles.scss\";\n\ninterface CardProps {\n  username: string;\n  columnName: string;\n  card: {\n    name: string;\n    id: number;\n    columnId: number;\n    description: string;\n    author: string;\n    comments: number;\n  };\n  comments: {\n    id: number;\n    cardId: number;\n    name: string;\n    text: string;\n  }[];\n}\n\nconst Card: React.FC<CardProps> = ({\n  card,\n  username,\n  columnName,\n  comments,\n}) => {\n  const [isShow, setIsShow] = useState(false);\n\n  const handleClose = () => setIsShow(false);\n  const handleShow = () => setIsShow(true);\n\n  return (\n    <div className=\"card__wrapper\" onClick={handleShow}>\n      <p>{card.name}</p>\n\n      {card.comments ? (\n        <div className=\"comments-icon\">\n          <img src={Comments} alt=\"comments\" />\n          <p className=\"comments-icon__text\">{card.comments}</p>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <CardPopup\n        cardName={card.name}\n        columnName={columnName}\n        isShow={isShow}\n        onHide={handleClose}\n        description={card.description}\n        cardId={card.id}\n        username={username}\n        comments={comments}\n        author={card.author}\n      />\n    </div>\n  );\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/plus.05989119.svg\";","import React, { useState, useContext } from \"react\";\n\nimport { FormControl, Form, Button } from \"react-bootstrap\";\n\nimport Card from \"../card/card\";\nimport { MethodsContext } from \"../../App\";\n\nimport \"./card-list.styles.scss\";\nimport Plus from \"../../assets/plus.svg\";\n\ninterface CardProps {\n  username: string;\n  item: {\n    id: number;\n    columnName: string;\n  };\n  cards: {\n    id: number;\n    name: string;\n    columnId: number;\n    description: string;\n    author: string;\n    comments: number;\n  }[];\n  comments: {\n    id: number;\n    cardId: number;\n    name: string;\n    text: string;\n  }[];\n}\n\nconst CardList: React.FC<CardProps> = ({ item, username, cards, comments }) => {\n  const [isShow, setIsShow] = useState(false);\n  const [columnName, setColumnName] = useState(\"\");\n  const [newCard, setNewCard] = useState(\"\");\n  const [columnNameHidden, setColumnNameHidden] = useState(false);\n\n  const methods = useContext(MethodsContext);\n  const currentCards = cards.filter((card) => card.columnId === item.id);\n\n  const hideColumnName = (): void => {\n    setColumnNameHidden(true);\n  };\n\n  const showColumnName = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      setColumnNameHidden(false);\n      if (columnName) {\n        methods?.editColumnName(item.id, columnName);\n      }\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setColumnName(e.target.value);\n  };\n\n  const showNewCardInput = (): void => {\n    setIsShow(true);\n  };\n\n  const newCardHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (newCard) {\n      methods?.addNewCard(item.id, newCard);\n      setNewCard(\"\");\n      setIsShow(false);\n    }\n    setIsShow(false);\n  };\n\n  const NewCardHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setNewCard(e.target.value);\n  };\n\n  return (\n    <div className=\"card-list__wrapper\">\n      {columnNameHidden ? (\n        <FormControl\n          autoFocus\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder={item.columnName}\n          onChange={handleChange}\n          onKeyPress={showColumnName}\n        />\n      ) : (\n        <h4 onClick={hideColumnName}>{item.columnName}</h4>\n      )}\n\n      {currentCards?.map(\n        (card: {\n          name: string;\n          id: number;\n          columnId: number;\n          description: string;\n          author: string;\n          comments: number;\n        }) => {\n          return (\n            <Card\n              key={card.id}\n              card={card}\n              username={username}\n              columnName={item.columnName}\n              comments={comments}\n            />\n          );\n        }\n      )}\n\n      {isShow ? (\n        <Form onSubmit={newCardHandler} className=\"card-list__form\">\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Заголовок карточки\"\n              autoFocus\n              onChange={NewCardHandleChange}\n            />\n          </Form.Group>\n          <Button variant=\"success\" type=\"submit\">\n            Добавить карточку\n          </Button>\n        </Form>\n      ) : (\n        <button className=\"card-list__new-card\" onClick={showNewCardInput}>\n          <img src={Plus} alt=\"plus\" />\n          Добавить карточку\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nimport CardList from \"../card-list/card-list\";\nimport Plus from \"../../assets/plus.svg\";\n\nimport \"./board.styles.scss\";\n\ninterface BoardProps {\n  username: string;\n  columns: {\n    id: number;\n    columnName: string;\n  }[];\n  cards: {\n    id: number;\n    name: string;\n    columnId: number;\n    description: string;\n    author: string;\n    comments: number;\n  }[];\n  comments: {\n    id: number;\n    cardId: number;\n    name: string;\n    text: string;\n  }[];\n}\n\nconst Board: React.FC<BoardProps> = ({\n  username,\n  columns,\n  cards,\n  comments,\n}) => {\n  return (\n    <div className=\"board__wrapper\">\n      {columns.map((item) => {\n        return (\n          <CardList\n            key={item.id}\n            item={item}\n            username={username}\n            cards={cards}\n            comments={comments}\n          />\n        );\n      })}\n\n      <div className=\"board__new-card\">\n        <img src={Plus} alt=\"plus\" />\n        Добавить еще одну колонку\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","export const Columns = [\n  { id: 1, columnName: \"TODO\" },\n  { id: 2, columnName: \"add feature\" },\n  { id: 3, columnName: \"In Progress\" },\n  { id: 4, columnName: \"Done\" },\n];\n\nexport const Cards = [\n  {\n    name: \"create page\",\n    id: 11,\n    columnId: 1,\n    description: `Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consectetur repellendus, nesciunt similique ratione neque aspernatur consequatur veniam exercitationem nostrum quo laborum ipsa, esse nihil pariatur. Ex quasi explicabo fugit unde.`,\n    author: \"Jack\",\n    comments: 2,\n  },\n  {\n    name: \"add feature\",\n    id: 12,\n    columnId: 1,\n    description: \"\",\n    author: \"Jack\",\n    comments: 0,\n  },\n  {\n    name: \"deploy\",\n    id: 13,\n    columnId: 1,\n    description: \"\",\n    author: \"Phil\",\n    comments: 0,\n  },\n  {\n    name: \"design for new page\",\n    id: 14,\n    columnId: 2,\n    description: \"\",\n    author: \"Helen\",\n    comments: 1,\n  },\n  {\n    name: \"write unit tests\",\n    id: 15,\n    columnId: 3,\n    description: \"\",\n    author: \"Yanis\",\n    comments: 0,\n  },\n  {\n    name: \"hand testing\",\n    id: 16,\n    columnId: 3,\n    description: \"\",\n    author: \"Yanis\",\n    comments: 1,\n  },\n  {\n    name: \"create architecture\",\n    id: 17,\n    columnId: 4,\n    description: \"\",\n    author: \"Jack\",\n    comments: 0,\n  },\n];\n\nexport const Comments = [\n  { name: \"Jessy\", text: \"LOL\", id: 101, cardId: 11 },\n  {\n    name: \"Nancy\",\n    text: \"Is this lorem ipsum??? Where is real description?\",\n    id: 102,\n    cardId: 11,\n  },\n  { name: \"Chief\", text: \"good luck!\", id: 103, cardId: 14 },\n  {\n    name: \"Michael Scott\",\n    text: \"NO... no no no please no\",\n    id: 104,\n    cardId: 16,\n  },\n];\n","import React, { useState, useEffect } from \"react\";\n\nimport NameModal from \"./components/name-modal/name-modal\";\nimport Board from \"./components/board/board\";\n\nimport { Columns, Cards, Comments } from \"./data\";\n\nimport \"./App.css\";\n\ninterface MethodsContextInterface {\n  editColumnName: (columnId: number, newValue: string) => void;\n  editCardName: (cardId: number, newValue: string) => void;\n  editComment: (commentId: number, newValue: string) => void;\n  addNewCard: (columnId: number, newValue: string) => void;\n  addNewComment: (cardId: number, newValue: string) => void;\n  addNewDecription: (cardId: number, value: string) => void;\n  deleteDescription: (cardId: number) => void;\n  deleteCard: (cardId: number) => void;\n  deleteComment: (commentId: number) => void;\n}\n\nexport const MethodsContext = React.createContext<\n  MethodsContextInterface | undefined\n>(undefined);\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState(\"\");\n  const [modalShow, setModalShow] = useState(true);\n\n  const [columns, setColumns] = useState(Columns);\n  const [cards, setCards] = useState(Cards);\n  const [comments, setComments] = useState(Comments);\n\n  useEffect(() => {\n    let storageNameValue = localStorage.getItem(\"username\");\n    if (storageNameValue) {\n      setUser(storageNameValue);\n    }\n    let storageColumnsValue = localStorage.getItem(\"columns\");\n    if (storageColumnsValue) {\n      setColumns(JSON.parse(storageColumnsValue));\n    }\n    let storageCardsValue = localStorage.getItem(\"cards\");\n    if (storageCardsValue) {\n      setCards(JSON.parse(storageCardsValue));\n    }\n    let storageCommentsValue = localStorage.getItem(\"comments\");\n    if (storageCommentsValue) {\n      setComments(JSON.parse(storageCommentsValue));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"columns\", JSON.stringify(columns));\n    localStorage.setItem(\"cards\", JSON.stringify(cards));\n    localStorage.setItem(\"comments\", JSON.stringify(comments));\n  }, [columns, cards, comments]);\n\n  const setUserName = (value: string): void => {\n    setUser(value);\n    localStorage.setItem(\"username\", value);\n  };\n\n  const editColumnName = (columnId: number, newValue: string): void => {\n    setColumns(\n      columns.map((item) => {\n        if (item.id === columnId) {\n          item.columnName = newValue;\n        }\n        return item;\n      })\n    );\n  };\n\n  const editCardName = (cardId: number, newValue: string): void => {\n    setCards(\n      cards.map((item) => {\n        if (item.id === cardId) {\n          item.name = newValue;\n        }\n        return item;\n      })\n    );\n  };\n\n  const editComment = (commentId: number, newValue: string): void => {\n    setComments(\n      comments.map((item) => {\n        if (item.id === commentId) {\n          item.text = newValue;\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewCard = (columnId: number, newValue: string): void => {\n    setCards([\n      ...cards,\n      {\n        name: newValue,\n        id: cards[cards.length - 1].id + 1,\n        columnId: columnId,\n        description: \"\",\n        author: user,\n        comments: 0,\n      },\n    ]);\n  };\n\n  const addNewComment = (cardId: number, newValue: string): void => {\n    setComments([\n      ...comments,\n      {\n        name: user,\n        text: newValue,\n        id: comments[comments.length - 1].id + 1,\n        cardId: cardId,\n      },\n    ]);\n    setCards(\n      cards.map((item) => {\n        if (item.id === cardId) {\n          item.comments += 1;\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewDecription = (cardId: number, value: string) => {\n    setCards(\n      cards.map((item) => {\n        if (item.id === cardId) {\n          item.description = value;\n        }\n        return item;\n      })\n    );\n  };\n\n  const deleteDescription = (cardId: number): void => {\n    setCards(\n      cards.map((item) => {\n        if (item.id === cardId) {\n          item.description = \"\";\n        }\n        return item;\n      })\n    );\n  };\n\n  const deleteCard = (cardId: number): void => {\n    setCards(cards.filter((item) => item.id !== cardId));\n  };\n\n  const deleteComment = (commentId: number): void => {\n    setComments(comments.filter((item) => item.id !== commentId));\n  };\n\n  return (\n    <div className=\"App\">\n      {user ? (\n        <MethodsContext.Provider\n          value={{\n            editColumnName,\n            addNewCard,\n            addNewComment,\n            addNewDecription,\n            deleteDescription,\n            editCardName,\n            deleteCard,\n            editComment,\n            deleteComment,\n          }}\n        >\n          <Board\n            username={user}\n            columns={columns}\n            cards={cards}\n            comments={comments}\n          />\n        </MethodsContext.Provider>\n      ) : (\n        <NameModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          setUserName={setUserName}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}