{"version":3,"sources":["redux/cards/cards.actions.ts","redux/cards/cards.reducer.ts","redux/data.ts","redux/comments/comments.actions.ts","redux/comments/comments.reducer.ts","redux/columns/columns.actions.ts","redux/columns/columns.reducer.ts","redux/user/user.actions.ts","redux/user/user.reducer.ts","redux/root-reducer.ts","redux/store.ts","components/name-modal/name-modal.tsx","assets/comments.svg","components/comment/comment.tsx","components/comments-section/comments-section.tsx","components/description-section/description-section.tsx","components/card-title-section/card-title-section.tsx","components/card-popup/card-popup.tsx","components/card/card.tsx","assets/plus.svg","components/card-list/card-list.tsx","components/board/board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addCard","createAction","deleteCard","editCardName","addDescription","deleteDescription","cardsReducer","createReducer","name","id","columnId","description","author","type","state","action","payload","value","username","length","filter","item","map","addComment","editComment","deleteComment","commentsReducer","text","cardId","editColumnName","columnsReducer","setCurrentUser","userReducer","currentUser","rootReducer","combineReducers","cards","comments","columns","user","store","configureStore","reducer","useAppDispatch","useDispatch","NameModal","isShow","onHide","dispatch","useState","inputValue","setInputValue","onSubmit","Modal","show","size","aria-labelledby","centered","backdrop","Header","closeButton","Title","Body","FormControl","aria-label","aria-describedby","placeholder","onChange","e","target","onKeyPress","key","autoFocus","Footer","Button","onClick","variant","Comment","commentId","newComment","setNewComment","isEditing","setIsEditing","useSelector","InputGroup","className","Append","alert","CommentsSection","cardComments","DescriptionSection","newDescription","setNewDescription","isDescriptionEditing","setIsDescriptionEditing","CardTitleSection","cardName","columnName","newCardName","setNewCardName","isEditCardName","setIsEditCardName","CardPopup","stopPropagation","role","tabIndex","Card","card","setIsShow","handleShow","src","Comments","alt","CardList","setColumnName","newCard","setNewCard","columnNameHidden","setColumnNameHidden","columnCards","hideColumnName","Form","preventDefault","Group","controlId","Control","Plus","Board","App","isModalShow","setIsModalShow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9677d92.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const addCard = createAction<[number, string, string | null]>('ADD_CARD');\n\nexport const deleteCard = createAction<number>('DELETE_CARD');\n\nexport const editCardName = createAction<[number, string]>('EDIT_CARD_NAME');\n\nexport const addDescription = createAction<[number, string]>('ADD_DESCRIPTION');\n\nexport const deleteDescription = createAction<number>('DELETE_DESCRIPTION');\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport {\n  addCard,\n  deleteCard,\n  editCardName,\n  addDescription,\n  deleteDescription,\n} from './cards.actions';\n\nimport { Cards } from '../data';\n\nexport const cardsReducer = createReducer(Cards, {\n  [addCard.type]: (state, action) => {\n    const [id, value, username] = action.payload;\n    return [\n      ...state,\n      {\n        name: value,\n        id: state[state.length - 1].id + 1,\n        columnId: id,\n        description: '',\n        author: username,\n      },\n    ];\n  },\n\n  [deleteCard.type]: (state, action) => state.filter((item) => item.id !== action.payload),\n\n  [editCardName.type]: (state, action) => {\n    const [id, value] = action.payload;\n    return state.map((item) => {\n      if (item.id === id) {\n        return { ...item, name: value };\n      }\n      return item;\n    });\n  },\n\n  [addDescription.type]: (state, action) => {\n    const [id, value] = action.payload;\n    return state.map((item) => {\n      if (item.id === id) {\n        return { ...item, description: value };\n      }\n      return item;\n    });\n  },\n\n  [deleteDescription.type]: (state, action) => {\n    return state.map((item) => {\n      if (item.id === action.payload) {\n        return { ...item, description: '' };\n      }\n      return item;\n    });\n  },\n});\n","export const Columns = [\n  { id: 1, name: 'TODO' },\n  { id: 2, name: 'add feature' },\n  { id: 3, name: 'In Progress' },\n  { id: 4, name: 'Done' },\n];\n\nexport const Cards = [\n  {\n    name: 'create page',\n    id: 11,\n    columnId: 1,\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consectetur repellendus, nesciunt similique ratione neque aspernatur consequatur veniam exercitationem nostrum quo laborum ipsa, esse nihil pariatur. Ex quasi explicabo fugit unde.',\n    author: 'Jack',\n  },\n  {\n    name: 'add feature',\n    id: 12,\n    columnId: 1,\n    description: '',\n    author: 'Jack',\n  },\n  {\n    name: 'deploy',\n    id: 13,\n    columnId: 1,\n    description: '',\n    author: 'Phil',\n  },\n  {\n    name: 'design for new page',\n    id: 14,\n    columnId: 2,\n    description: '',\n    author: 'Helen',\n  },\n  {\n    name: 'write unit tests',\n    id: 15,\n    columnId: 3,\n    description: '',\n    author: 'Yanis',\n  },\n  {\n    name: 'hand testing',\n    id: 16,\n    columnId: 3,\n    description: '',\n    author: 'Yanis',\n  },\n  {\n    name: 'create architecture',\n    id: 17,\n    columnId: 4,\n    description: '',\n    author: 'Jack',\n  },\n];\n\nexport const Comments = [\n  { name: 'Jessy', text: 'LOL', id: 101, cardId: 11 },\n  {\n    name: 'Nancy',\n    text: 'Is this lorem ipsum??? Where is real description?',\n    id: 102,\n    cardId: 11,\n  },\n  { name: 'Chief', text: 'good luck!', id: 103, cardId: 14 },\n  {\n    name: 'Michael Scott',\n    text: 'NO... no no no please no',\n    id: 104,\n    cardId: 16,\n  },\n];\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const addComment = createAction<[number, string, string | null]>('ADD_COMMENT');\n\nexport const editComment = createAction<[number, string]>('EDIT_COMMENT');\n\nexport const deleteComment = createAction<number>('DELETE_COMMENT');\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport { addComment, editComment, deleteComment } from './comments.actions';\n\nimport { Comments } from '../data';\n\nexport const commentsReducer = createReducer(Comments, {\n  [addComment.type]: (state, action) => {\n    const [id, value, username] = action.payload;\n    return [\n      ...state,\n      {\n        name: username,\n        text: value,\n        id: state[state.length - 1].id + 1,\n        cardId: id,\n      },\n    ];\n  },\n\n  [editComment.type]: (state, action) => {\n    const [id, value] = action.payload;\n    return state.map((item) => {\n      if (item.id === id) {\n        return { ...item, text: value };\n      }\n      return item;\n    });\n  },\n\n  [deleteComment.type]: (state, action) => {\n    return state.filter((item) => item.id !== action.payload);\n  },\n});\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const editColumnName = createAction<[number, string]>('EDIT_COLUMN_NAME');\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport { editColumnName } from './columns.actions';\n\nimport { Columns } from '../data';\n\nexport const columnsReducer = createReducer(Columns, {\n  [editColumnName.type]: (state, action) => {\n    const [id, value] = action.payload;\n    return state.map((item) => {\n      if (item.id === id) {\n        return { ...item, name: value };\n      }\n      return item;\n    });\n  },\n});\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const setCurrentUser = createAction<string>('SET_CURRENT_USER');\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport { setCurrentUser } from './user.actions';\n\nconst INITIAL_STATE = {\n  currentUser: null,\n};\n\nexport const userReducer = createReducer(INITIAL_STATE, {\n  [setCurrentUser.type]: (state, action) => {\n    return {\n      ...state,\n      currentUser: action.payload,\n    };\n  },\n});\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { cardsReducer } from './cards/cards.reducer';\nimport { commentsReducer } from './comments/comments.reducer';\nimport { columnsReducer } from './columns/columns.reducer';\nimport { userReducer } from './user/user.reducer';\n\nconst rootReducer = combineReducers({\n  cards: cardsReducer,\n  comments: commentsReducer,\n  columns: columnsReducer,\n  user: userReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\n\nimport rootReducer from './root-reducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import React, { useState } from 'react';\n\nimport { Modal, Button, FormControl } from 'react-bootstrap';\n\nimport { useAppDispatch } from '../../redux/store';\nimport { setCurrentUser } from '../../redux/user/user.actions';\n\ninterface ModalProps {\n  isShow: boolean;\n  onHide: () => void;\n}\n\nconst NameModal: React.FC<ModalProps> = ({ isShow, onHide }) => {\n  const dispatch = useAppDispatch();\n  const [inputValue, setInputValue] = useState('');\n\n  const onSubmit = (): void => {\n    if (inputValue) {\n      onHide();\n      dispatch(setCurrentUser(inputValue));\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === 'Enter') {\n      onSubmit();\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <Modal\n      show={isShow}\n      onHide={onHide}\n      size=\"sm\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"static\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">Как вас зовут?</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <FormControl\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder=\"Ваше имя...\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          autoFocus\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onSubmit} variant=\"success\">\n          Принять\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default NameModal;\n","export default __webpack_public_path__ + \"static/media/comments.44398cb6.svg\";","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { FormControl, InputGroup, Button } from 'react-bootstrap';\nimport { PencilFill, TrashFill } from 'react-bootstrap-icons';\n\nimport { RootState } from '../../redux/root-reducer';\nimport { useAppDispatch } from '../../redux/store';\nimport { editComment, deleteComment } from '../../redux/comments/comments.actions';\n\nimport './comment.styles.scss';\n\ninterface CommentProps {\n  name: string;\n  text: string;\n  commentId: number;\n}\n\nconst Comment: React.FC<CommentProps> = ({ name, text, commentId }) => {\n  const dispatch = useAppDispatch();\n  const [newComment, setNewComment] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n\n  const username = useSelector((state: RootState) => state.user.currentUser);\n\n  const onEditComment = () => {\n    if (newComment) {\n      dispatch(editComment([commentId, newComment]));\n      setNewComment('');\n    }\n    setIsEditing(false);\n  };\n\n  const onCommentChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setNewComment(e.target.value);\n  };\n\n  return (\n    <>\n      {isEditing ? (\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"basic-url\"\n            placeholder=\"Изменить комментарий...\"\n            aria-label=\"Изменить комментарий...\"\n            aria-describedby=\"basic-addon2\"\n            value={newComment}\n            onChange={onCommentChange}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-success\" onClick={onEditComment}>\n              Сохранить\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      ) : (\n        <li className=\"comments-item\">\n          <div className=\"comments-body\">\n            <h5>{name}</h5>\n            <p>{text}</p>\n          </div>\n\n          <div className=\"header__icons\">\n            <PencilFill\n              className=\"icon-edit\"\n              size={17}\n              onClick={() => {\n                username === name\n                  ? setIsEditing(true)\n                  : alert('Вы не можете изменять чужие сообщения');\n              }}\n            />\n            <TrashFill\n              className=\"icon-delete\"\n              size={17}\n              onClick={() =>\n                username === name\n                  ? dispatch(deleteComment(commentId))\n                  : alert('Вы не можете удалять чужие сообщения')}\n            />\n          </div>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default Comment;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Modal, Button, FormControl, InputGroup } from 'react-bootstrap';\n\nimport { RootState } from '../../redux/root-reducer';\nimport { useAppDispatch } from '../../redux/store';\nimport { addComment } from '../../redux/comments/comments.actions';\n\nimport Comment from '../comment/comment';\n\nimport './comments-section.styles.scss';\n\ninterface CommentsSectionProps {\n  cardId: number;\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({ cardId }) => {\n  const dispatch = useAppDispatch();\n  const [newComment, setNewComment] = useState('');\n  const cardComments = useSelector((state: RootState) =>\n    state?.comments?.filter((item) => item.cardId === cardId),\n  );\n  const username = useSelector((state: RootState) => state.user.currentUser);\n\n  const onAddComment = () => {\n    if (newComment) {\n      dispatch(addComment([cardId, newComment, username]));\n      setNewComment('');\n    }\n  };\n\n  const onCommentChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setNewComment(e.target.value);\n  };\n\n  return (\n    <Modal.Footer className=\"card-options__footer\">\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"Напишите новый комментарий...\"\n          aria-label=\"Напишите комментарий...\"\n          aria-describedby=\"basic-addon2\"\n          onChange={onCommentChange}\n          value={newComment}\n        />\n        <InputGroup.Append>\n          <Button variant=\"outline-success\" onClick={onAddComment}>\n            Сохранить\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <ul className=\"comments-list\">\n        {cardComments?.map((item) => {\n          return <Comment key={item.id} name={item.name} text={item.text} commentId={item.id} />;\n        })}\n      </ul>\n    </Modal.Footer>\n  );\n};\n\nexport default CommentsSection;\n","import React, { useState } from 'react';\n\nimport { Modal, Button, FormControl, InputGroup } from 'react-bootstrap';\nimport { PencilFill, TrashFill } from 'react-bootstrap-icons';\n\nimport { useAppDispatch } from '../../redux/store';\nimport { addDescription, deleteDescription } from '../../redux/cards/cards.actions';\n\nimport './description-section.styles.scss';\n\ninterface DescriptionSectionProps {\n  cardId: number;\n  description: string;\n}\n\nconst DescriptionSection: React.FC<DescriptionSectionProps> = ({ cardId, description }) => {\n  const dispatch = useAppDispatch();\n  const [newDescription, setNewDescription] = useState('');\n  const [isDescriptionEditing, setIsDescriptionEditing] = useState(false);\n\n  const onAddDescription = () => {\n    if (newDescription) {\n      dispatch(addDescription([cardId, newDescription]));\n      setNewDescription('');\n    }\n    setIsDescriptionEditing(false);\n  };\n\n  const onDescriptionChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setNewDescription(e.target.value);\n  };\n\n  return (\n    <Modal.Body className=\"card-options__body\">\n      <div className=\"description-title\">\n        <h3>Описание </h3>\n        <div className=\"header__icons\">\n          <PencilFill\n            className=\"icon-edit\"\n            size={17}\n            onClick={() => setIsDescriptionEditing(true)}\n          />\n          <TrashFill\n            className=\"icon-delete\"\n            size={17}\n            onClick={() => dispatch(deleteDescription(cardId))}\n          />\n        </div>\n      </div>\n\n      {description && !isDescriptionEditing ? (\n        <>\n          <p>{description}</p>\n        </>\n      ) : (\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"basic-url\"\n            placeholder=\"Добавить описание...\"\n            aria-label=\"Добавить описание...\"\n            aria-describedby=\"basic-addon2\"\n            onChange={onDescriptionChange}\n            value={newDescription}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-success\" onClick={onAddDescription}>\n              Сохранить\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )}\n    </Modal.Body>\n  );\n};\n\nexport default DescriptionSection;\n","import React, { useState } from 'react';\n\nimport { Modal, FormControl, InputGroup, Button } from 'react-bootstrap';\n\nimport { PencilFill, TrashFill } from 'react-bootstrap-icons';\n\nimport { useAppDispatch } from '../../redux/store';\nimport { editCardName, deleteCard } from '../../redux/cards/cards.actions';\n\nimport './card-title-sectin.styles.scss';\n\ninterface CardTitleSectionProps {\n  cardName: string;\n  cardId: number;\n  columnName: string;\n  author: string;\n}\n\nconst CardTitleSection: React.FC<CardTitleSectionProps> = ({\n  cardName,\n  cardId,\n  columnName,\n  author,\n}) => {\n  const dispatch = useAppDispatch();\n  const [newCardName, setNewCardName] = useState('');\n  const [isEditCardName, setIsEditCardName] = useState(false);\n\n  const addDescription = () => {\n    if (newCardName) {\n      dispatch(editCardName([cardId, newCardName]));\n      setNewCardName('');\n    }\n    setIsEditCardName(false);\n  };\n\n  const onCardNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setNewCardName(e.target.value);\n  };\n\n  return (\n    <Modal.Header closeButton>\n      <Modal.Title id=\"contained-modal-title-vcenter\" className=\"header__container\">\n        {isEditCardName ? (\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              id=\"basic-url\"\n              placeholder=\"Изменить название...\"\n              aria-label=\"Изменить название...\"\n              aria-describedby=\"basic-addon2\"\n              onChange={onCardNameChange}\n              value={newCardName}\n            />\n            <InputGroup.Append>\n              <Button variant=\"outline-success\" onClick={addDescription}>\n                Сохранить\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        ) : (\n          <>\n            <p>\n              {columnName} &gt; {cardName}\n              <small>({author})</small>\n            </p>\n            <div className=\"header__icons\">\n              <PencilFill className=\"icon-edit\" size={20} onClick={() => setIsEditCardName(true)} />\n              <TrashFill\n                className=\"icon-delete\"\n                size={20}\n                onClick={() => {\n                  dispatch(deleteCard(cardId));\n                }}\n              />\n            </div>\n          </>\n        )}\n      </Modal.Title>\n    </Modal.Header>\n  );\n};\n\nexport default CardTitleSection;\n","import React from 'react';\n\nimport { Modal } from 'react-bootstrap';\n\nimport CommentsSection from '../comments-section/comments-section';\nimport DescriptionSection from '../description-section/description-section';\nimport CardTitleSection from '../card-title-section/card-title-section';\n\nimport './card-popup.styles.scss';\n\ninterface CardPopupProps {\n  cardName: string;\n  cardId: number;\n  author: string;\n  description: string;\n  columnName: string;\n  isShow: boolean;\n  onHide: () => void;\n}\n\nconst CardPopup: React.FC<CardPopupProps> = ({\n  cardName,\n  isShow,\n  onHide,\n  description,\n  columnName,\n  cardId,\n  author,\n}) => {\n  return (\n    <div\n      onClick={(e) => e.stopPropagation()}\n      role=\"button\"\n      onKeyPress={(e) => {\n        if (e.key === 'Enter') {\n          e.stopPropagation();\n        }\n      }}\n      tabIndex={0}\n    >\n      <Modal\n        show={isShow}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <CardTitleSection\n          cardId={cardId}\n          cardName={cardName}\n          columnName={columnName}\n          author={author}\n        />\n        <DescriptionSection description={description} cardId={cardId} />\n        <CommentsSection cardId={cardId} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default CardPopup;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/root-reducer';\n\nimport Comments from '../../assets/comments.svg';\nimport CardPopup from '../card-popup/card-popup';\n\nimport './card.styles.scss';\n\ninterface CardProps {\n  columnName: string;\n  card: {\n    name: string;\n    id: number;\n    columnId: number;\n    description: string;\n    author: string;\n  };\n}\n\nconst Card: React.FC<CardProps> = ({ card, columnName }) => {\n  const [isShow, setIsShow] = useState(false);\n\n  const comments = useSelector((state: RootState) =>\n    state.comments.filter((item) => item.cardId === card.id),\n  );\n\n  const handleClose = () => setIsShow(false);\n  const handleShow = () => setIsShow(true);\n\n  return (\n    <div\n      className=\"card__wrapper\"\n      onClick={handleShow}\n      onKeyPress={(e) => {\n        if (e.key === 'Enter') {\n          handleShow();\n        }\n      }}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <p>{card.name}</p>\n\n      {comments?.length ? (\n        <div className=\"comments-icon\">\n          <img src={Comments} alt=\"comments\" />\n          <p className=\"comments-icon__text\">{comments.length}</p>\n        </div>\n      ) : (\n        ''\n      )}\n      <CardPopup\n        cardName={card.name}\n        columnName={columnName}\n        isShow={isShow}\n        onHide={handleClose}\n        description={card.description}\n        cardId={card.id}\n        author={card.author}\n      />\n    </div>\n  );\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/plus.05989119.svg\";","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormControl, Form, Button } from 'react-bootstrap';\nimport { useAppDispatch } from '../../redux/store';\nimport { RootState } from '../../redux/root-reducer';\n\nimport { editColumnName } from '../../redux/columns/columns.actions';\nimport { addCard } from '../../redux/cards/cards.actions';\n\nimport Card from '../card/card';\n\nimport './card-list.styles.scss';\nimport Plus from '../../assets/plus.svg';\n\ninterface CardProps {\n  item: {\n    id: number;\n    name: string;\n  };\n}\n\nconst CardList: React.FC<CardProps> = ({ item }) => {\n  const dispatch = useAppDispatch();\n  const [isShow, setIsShow] = useState(false);\n  const [columnName, setColumnName] = useState('');\n  const [newCard, setNewCard] = useState('');\n  const [columnNameHidden, setColumnNameHidden] = useState(false);\n\n  const columnCards = useSelector((state: RootState) =>\n    state.cards.filter((card) => card.columnId === item.id),\n  );\n  const username = useSelector((state: RootState) => state.user.currentUser);\n\n  const hideColumnName = (): void => {\n    setColumnNameHidden(true);\n  };\n\n  const showColumnName = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === 'Enter') {\n      setColumnNameHidden(false);\n      if (columnName) {\n        dispatch(editColumnName([item.id, columnName]));\n      }\n    }\n  };\n\n  const onColumnNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setColumnName(e.target.value);\n  };\n\n  const showNewCardInput = (): void => {\n    setIsShow(true);\n  };\n\n  const onNewCardChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setNewCard(e.target.value);\n  };\n\n  const onNewCardSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (newCard) {\n      dispatch(addCard([item.id, newCard, username]));\n      setNewCard('');\n      setIsShow(false);\n    }\n    setIsShow(false);\n  };\n\n  return (\n    <div className=\"card-list__wrapper\">\n      {columnNameHidden ? (\n        <FormControl\n          autoFocus\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder={item.name}\n          onChange={onColumnNameChange}\n          onKeyPress={showColumnName}\n        />\n      ) : (\n        <div\n          onClick={hideColumnName}\n          role=\"button\"\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              hideColumnName();\n            }\n          }}\n          tabIndex={0}\n        >\n          <h4>{item.name}</h4>\n        </div>\n      )}\n\n      {columnCards?.map(\n        (card: {\n          name: string;\n          id: number;\n          columnId: number;\n          description: string;\n          author: string;\n        }) => {\n          return <Card key={card.id} card={card} columnName={item.name} />;\n        },\n      )}\n\n      {isShow ? (\n        <Form onSubmit={onNewCardSubmit} className=\"card-list__form\">\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Заголовок карточки\"\n              autoFocus\n              onChange={onNewCardChange}\n            />\n          </Form.Group>\n          <Button variant=\"success\" type=\"submit\">\n            Добавить карточку\n          </Button>\n        </Form>\n      ) : (\n        <button className=\"card-list__new-card\" onClick={showNewCardInput} type=\"button\">\n          <img src={Plus} alt=\"plus\" />\n          Добавить карточку\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/root-reducer';\n\nimport CardList from '../card-list/card-list';\nimport Plus from '../../assets/plus.svg';\n\nimport './board.styles.scss';\n\nconst Board: React.FC = () => {\n  const columns = useSelector((state: RootState) => state.columns);\n\n  return (\n    <div className=\"board__wrapper\">\n      {columns.map((item) => {\n        return <CardList key={item.id} item={item} />;\n      })}\n\n      <div className=\"board__new-card\">\n        <img src={Plus} alt=\"plus\" />\n        Добавить еще одну колонку\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from './redux/root-reducer';\n\nimport NameModal from './components/name-modal/name-modal';\nimport Board from './components/board/board';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [isModalShow, setIsModalShow] = useState(true);\n\n  const user = useSelector((state: RootState) => state.user.currentUser);\n\n  return (\n    <div className=\"App\">\n      {user ? <Board /> : <NameModal isShow={isModalShow} onHide={() => setIsModalShow(false)} />}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}