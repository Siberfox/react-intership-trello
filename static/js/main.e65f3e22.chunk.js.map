{"version":3,"sources":["components/custom-popup/custom-popup.component.tsx","assets/comments.svg","components/card-options/card-options.component.tsx","components/card/card.component.tsx","assets/plus.svg","components/card-list/card-list.component.tsx","components/board/board.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomModal","show","onHide","setUserName","useState","inputValue","setInputValue","onSubmit","Modal","size","aria-labelledby","centered","backdrop","Header","closeButton","Title","id","Body","FormControl","aria-label","aria-describedby","placeholder","onChange","e","target","value","onKeyPress","key","autoFocus","Footer","Button","onClick","variant","CardOptions","name","description","boardName","comments","cardId","boardId","addNewComment","stopPropagation","className","InputGroup","Append","map","item","text","Card","setShow","length","src","Comments","alt","CardList","setBoardName","addNewCard","inputBoardName","setInputBoardName","inputNewCard","setInputNewCard","boardNameHidden","setBoardNameHidden","cards","i","cardName","Form","preventDefault","Group","controlId","Control","type","Plus","Board","username","data","App","user","setUser","modalShow","setModalShow","nanoid","boardData","setBoardData","useEffect","storageNameValue","localStorage","getItem","storageBoardValue","JSON","parse","newValue","push","card","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e65f3e22.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Modal, Button, FormControl } from \"react-bootstrap\";\n\ninterface modalProps {\n  show: boolean;\n  onHide: () => void;\n  setUserName: (value: string) => void;\n}\n\nconst CustomModal: React.FC<modalProps> = ({ show, onHide, setUserName }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const onSubmit = (): void => {\n    if (inputValue) {\n      onHide();\n      setUserName(inputValue);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"sm\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"static\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Как вас зовут?\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <FormControl\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder=\"Ваше имя...\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          autoFocus\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onSubmit} variant=\"success\">\n          Принять\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default CustomModal;\n","export default __webpack_public_path__ + \"static/media/comments.44398cb6.svg\";","import React from \"react\";\n\nimport { Modal, Button, FormControl, InputGroup } from \"react-bootstrap\";\n\nimport \"./card-options.styles.scss\";\n\ninterface CardOptionsProps {\n  name: string;\n  cardId: string;\n  boardId: string;\n  description: string;\n  boardName: string;\n  comments: { name: string; text: string; id: string }[];\n  show: boolean;\n  onHide: () => void;\n  addNewComment: (boardId: string, cardId: string, value: string) => void;\n}\n\nconst CardOptions: React.FC<CardOptionsProps> = ({\n  name,\n  show,\n  onHide,\n  description,\n  boardName,\n  comments,\n  cardId,\n  boardId,\n  addNewComment,\n}) => {\n  return (\n    <div onClick={(e) => e.stopPropagation()}>\n      <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            {boardName} &gt; {name}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"card-options__body\">\n          <h3>Описание</h3>\n          {description ? (\n            <p>{description}</p>\n          ) : (\n            <InputGroup className=\"mb-3\">\n              <FormControl\n                id=\"basic-url\"\n                placeholder=\"Добавить описание...\"\n                aria-label=\"Добавить описание...\"\n                aria-describedby=\"basic-addon2\"\n              />\n              <InputGroup.Append>\n                <Button variant=\"outline-success\">Сохранить</Button>\n              </InputGroup.Append>\n            </InputGroup>\n          )}\n        </Modal.Body>\n        <Modal.Footer className=\"card-options__footer\">\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              placeholder=\"Напишите комментарий...\"\n              aria-label=\"Напишите комментарий...\"\n              aria-describedby=\"basic-addon2\"\n            />\n            <InputGroup.Append>\n              <Button\n                variant=\"outline-success\"\n                onClick={() => addNewComment(boardId, cardId, \"New comment\")}\n              >\n                Сохранить\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n          <ul className=\"comments-list\">\n            {comments.map((item) => {\n              return (\n                <li key={item.id}>\n                  <h5>{item.name}</h5>\n                  <p>{item.text}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default CardOptions;\n","import React, { useState } from \"react\";\n\nimport Comments from \"../../assets/comments.svg\";\nimport CardOptions from \"../card-options/card-options.component\";\n\nimport \"./card.styles.scss\";\n\ninterface CardProps {\n  name: string;\n  cardId: string;\n  boardName: string;\n  boardId: string;\n  description: string;\n  comments: { name: string; text: string; id: string }[];\n  addNewComment: (boardId: string, cardId: string, value: string) => void;\n}\n\nconst Card: React.FC<CardProps> = ({\n  name,\n  comments,\n  description,\n  boardName,\n  cardId,\n  boardId,\n  addNewComment,\n}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <div className=\"card__wrapper\" onClick={handleShow}>\n      <p>{name}</p>\n\n      {comments.length ? (\n        <div className=\"comments-icon\">\n          <img src={Comments} alt=\"comments\" />\n          <p className=\"comments-icon__text\">{comments.length}</p>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <CardOptions\n        name={name}\n        boardName={boardName}\n        show={show}\n        onHide={handleClose}\n        description={description}\n        comments={comments}\n        boardId={boardId}\n        cardId={cardId}\n        addNewComment={addNewComment}\n      />\n    </div>\n  );\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/plus.05989119.svg\";","import React, { useState } from \"react\";\n\nimport { FormControl, Form, Button } from \"react-bootstrap\";\n\nimport Card from \"../card/card.component\";\n\nimport \"./card-list.styles.scss\";\nimport Plus from \"../../assets/plus.svg\";\n\ninterface CardProps {\n  item: {\n    id: string;\n    boardName: string;\n    cards: {\n      id: string;\n      cardName: string;\n      description: string;\n      comments: { name: string; text: string; id: string }[];\n    }[];\n  };\n  setBoardName: (id: string, newValue: string) => void;\n  addNewCard: (id: string, newValue: string) => void;\n  addNewComment: (boardId: string, cardId: string, value: string) => void;\n}\n\nconst CardList: React.FC<CardProps> = ({\n  item,\n  setBoardName,\n  addNewCard,\n  addNewComment,\n}) => {\n  const [show, setShow] = useState(false);\n  const [inputBoardName, setInputBoardName] = useState(\"\");\n  const [inputNewCard, setInputNewCard] = useState(\"\");\n  const [boardNameHidden, setBoardNameHidden] = useState(false);\n\n  const hideBoardName = (): void => {\n    setBoardNameHidden(true);\n  };\n\n  const showBoardName = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      setBoardNameHidden(false);\n      if (inputBoardName) {\n        setBoardName(item.id, inputBoardName);\n      }\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputBoardName(e.target.value);\n  };\n\n  const showNewCardInput = (): void => {\n    setShow(true);\n  };\n\n  const newCardHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (inputNewCard) {\n      addNewCard(item.id, inputNewCard);\n      setInputNewCard(\"\");\n      setShow(false);\n    }\n    setShow(false);\n  };\n\n  const NewCardHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewCard(e.target.value);\n  };\n\n  return (\n    <div className=\"card-list__wrapper\">\n      {boardNameHidden ? (\n        <FormControl\n          autoFocus\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder={item.boardName}\n          onChange={handleChange}\n          onKeyPress={showBoardName}\n        />\n      ) : (\n        <h4 onClick={hideBoardName}>{item.boardName}</h4>\n      )}\n\n      {item.cards.map(\n        (i: {\n          id: string;\n          cardName: string;\n          description: string;\n          comments: { name: string; text: string; id: string }[];\n        }) => {\n          return (\n            <Card\n              key={i.id}\n              name={i.cardName}\n              description={i.description}\n              comments={i.comments}\n              boardName={item.boardName}\n              boardId={item.id}\n              cardId={i.id}\n              addNewComment={addNewComment}\n            />\n          );\n        }\n      )}\n\n      {show ? (\n        <Form onSubmit={newCardHandler} className=\"card-list__form\">\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Заголовок карточки\"\n              autoFocus\n              onChange={NewCardHandleChange}\n            />\n          </Form.Group>\n          <Button variant=\"success\" type=\"submit\">\n            Добавить карточку\n          </Button>\n        </Form>\n      ) : (\n        <button className=\"card-list__new-card\" onClick={showNewCardInput}>\n          <img src={Plus} alt=\"plus\" />\n          Добавить карточку\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nimport CardList from \"../card-list/card-list.component\";\nimport Plus from \"../../assets/plus.svg\";\n\nimport \"./board.styles.scss\";\n\ninterface BoardProps {\n  username: string;\n  data: {\n    id: string;\n    boardName: string;\n    cards: {\n      id: string;\n      cardName: string;\n      description: string;\n      comments: { name: string; text: string; id: string }[];\n    }[];\n  }[];\n  setBoardName: (id: string, newValue: string) => void;\n  addNewCard: (id: string, newValue: string) => void;\n  addNewComment: (boardId: string, cardId: string, value: string) => void;\n}\n\nconst Board: React.FC<BoardProps> = ({\n  username,\n  data,\n  setBoardName,\n  addNewCard,\n  addNewComment,\n}) => {\n  return (\n    <div className=\"board__wrapper\">\n      {data.map((item) => {\n        return (\n          <CardList\n            key={item.id}\n            item={item}\n            setBoardName={setBoardName}\n            addNewCard={addNewCard}\n            addNewComment={addNewComment}\n          />\n        );\n      })}\n\n      <div className=\"board__new-card\">\n        <img src={Plus} alt=\"plus\" />\n        Добавить еще одну колонку\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport CustomModal from \"./components/custom-popup/custom-popup.component\";\nimport Board from \"./components/board/board.component\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState(\"\");\n  const [modalShow, setModalShow] = useState(true);\n\n  const [boardData, setBoardData] = useState([\n    {\n      id: nanoid(),\n      boardName: \"TODO\",\n      cards: [\n        {\n          cardName: \"create page\",\n          id: nanoid(),\n          description: `Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consectetur repellendus, nesciunt similique ratione neque aspernatur consequatur veniam exercitationem nostrum quo laborum ipsa, esse nihil pariatur. Ex quasi explicabo fugit unde.`,\n          comments: [\n            { name: \"Jessy\", text: \"LOL\", id: nanoid() },\n            {\n              name: \"Nancy\",\n              text: \"Is this lorem ipsum??? Where is real description?\",\n              id: nanoid(),\n            },\n          ],\n        },\n        {\n          cardName: \"add feature\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n        { cardName: \"deploy\", id: nanoid(), description: \"\", comments: [] },\n      ],\n    },\n    {\n      id: nanoid(),\n      boardName: \"In Progress\",\n      cards: [\n        {\n          cardName: \"design for new page\",\n          id: nanoid(),\n          description: \"\",\n          comments: [\n            {\n              name: \"Michael Scott\",\n              text: \"NO... no no no please no\",\n              id: nanoid(),\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: nanoid(),\n      boardName: \"Testing\",\n      cards: [\n        {\n          cardName: \"write unit tests\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n        {\n          cardName: \"hand testing\",\n          id: nanoid(),\n          description: \"\",\n          comments: [{ name: \"Chief\", text: \"good luck!\", id: nanoid() }],\n        },\n      ],\n    },\n    {\n      id: nanoid(),\n      boardName: \"Done\",\n      cards: [\n        {\n          cardName: \"create architecture\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n      ],\n    },\n  ]);\n\n  useEffect(() => {\n    let storageNameValue = localStorage.getItem(\"username\");\n    if (storageNameValue) {\n      setUser(storageNameValue);\n    }\n    let storageBoardValue = localStorage.getItem(\"board\");\n    if (storageBoardValue) {\n      setBoardData(JSON.parse(storageBoardValue));\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"board\", JSON.stringify(boardData));\n  // }, [boardData]);\n\n  const setUserName = (value: string): void => {\n    setUser(value);\n    localStorage.setItem(\"username\", value);\n  };\n\n  const setBoardName = (id: string, newValue: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === id) {\n          item.boardName = newValue;\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewCard = (id: string, newValue: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === id) {\n          item.cards.push({\n            cardName: newValue,\n            id: nanoid(),\n            description: \"\",\n            comments: [],\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewComment = (\n    boardId: string,\n    cardId: string,\n    value: string\n  ): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === boardId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.comments.push({ name: user, text: value, id: nanoid() });\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewDecription = (boardId: string, cardId: string, value: string) => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === boardId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.description = value;\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {user ? (\n        <Board\n          username={user}\n          data={boardData}\n          setBoardName={setBoardName}\n          addNewCard={addNewCard}\n          addNewComment={addNewComment}\n        />\n      ) : (\n        <CustomModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          setUserName={setUserName}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}