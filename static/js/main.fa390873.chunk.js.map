{"version":3,"sources":["components/custom-popup/custom-popup.component.tsx","assets/comments.svg","components/comments-section/comments-section.component.tsx","components/description-section/description-section.component.tsx","components/card-title-section/card-title-section.component.tsx","components/card-options/card-options.component.tsx","components/card/card.component.tsx","assets/plus.svg","components/card-list/card-list.component.tsx","components/board/board.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomModal","show","onHide","setUserName","useState","inputValue","setInputValue","onSubmit","Modal","size","aria-labelledby","centered","backdrop","Header","closeButton","Title","id","Body","FormControl","aria-label","aria-describedby","placeholder","onChange","e","target","value","onKeyPress","key","autoFocus","Footer","Button","onClick","variant","CommentsSection","cardId","columnId","comments","inputNewComment","setInputNewComment","methods","useContext","MethodsContext","className","InputGroup","Append","addNewComment","map","item","name","text","DescriptionSection","description","inputNewDescription","setInputNewDescription","editDescriptionInput","setEditDescriptionInput","deleteDescription","addNewDecription","CardTitleSection","cardName","columnName","CardOptions","stopPropagation","Card","setShow","length","src","Comments","alt","CardList","inputColumnName","setInputColumnName","inputNewCard","setInputNewCard","columnNameHidden","setColumnNameHidden","editColumnName","cards","i","Form","preventDefault","addNewCard","Group","controlId","Control","type","Plus","Board","username","data","React","createContext","undefined","App","user","setUser","modalShow","setModalShow","nanoid","boardData","setBoardData","useEffect","storageNameValue","localStorage","getItem","storageBoardValue","JSON","parse","Provider","newValue","push","card","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa390873.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Modal, Button, FormControl } from \"react-bootstrap\";\n\ninterface modalProps {\n  show: boolean;\n  onHide: () => void;\n  setUserName: (value: string) => void;\n}\n\nconst CustomModal: React.FC<modalProps> = ({ show, onHide, setUserName }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const onSubmit = (): void => {\n    if (inputValue) {\n      onHide();\n      setUserName(inputValue);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"sm\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"static\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Как вас зовут?\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <FormControl\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder=\"Ваше имя...\"\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          autoFocus\n        />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onSubmit} variant=\"success\">\n          Принять\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default CustomModal;\n","export default __webpack_public_path__ + \"static/media/comments.44398cb6.svg\";","import React, { useState, useContext } from \"react\";\n\nimport { Modal, Button, FormControl, InputGroup } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\nimport \"./comments-section.styles.scss\";\n\ninterface CommentsSectionProps {\n  cardId: string;\n  columnId: string;\n  comments: { name: string; text: string; id: string }[];\n}\n\nconst CommentsSection: React.FC<CommentsSectionProps> = ({\n  cardId,\n  columnId,\n  comments,\n}) => {\n  const [inputNewComment, setInputNewComment] = useState(\"\");\n  const methods = useContext(MethodsContext);\n\n  const addComment = () => {\n    if (inputNewComment) {\n      methods?.addNewComment(columnId, cardId, inputNewComment);\n      setInputNewComment(\"\");\n    }\n  };\n\n  const commentHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewComment(e.target.value);\n  };\n\n  return (\n    <Modal.Footer className=\"card-options__footer\">\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder=\"Напишите комментарий...\"\n          aria-label=\"Напишите комментарий...\"\n          aria-describedby=\"basic-addon2\"\n          onChange={commentHandleChange}\n          value={inputNewComment}\n        />\n        <InputGroup.Append>\n          <Button variant=\"outline-success\" onClick={addComment}>\n            Сохранить\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n      <ul className=\"comments-list\">\n        {comments.map((item) => {\n          return (\n            <li key={item.id} className=\"comments-item\">\n              <div className=\"comments-body\">\n                <h5>{item.name}</h5>\n                <p>{item.text}</p>\n              </div>\n\n              <div className=\"header__icons\">\n                <PencilFill className=\"icon-edit\" size={17} />\n                <TrashFill className=\"icon-delete\" size={17} />\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </Modal.Footer>\n  );\n};\n\nexport default CommentsSection;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal, Button, FormControl, InputGroup } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./description-section.styles.scss\";\n\ninterface DescriptionSectionProps {\n  cardId: string;\n  columnId: string;\n  description: string;\n}\n\nconst DescriptionSection: React.FC<DescriptionSectionProps> = ({\n  cardId,\n  columnId,\n  description,\n}) => {\n  const [inputNewDescription, setInputNewDescription] = useState(\"\");\n  const [editDescriptionInput, setEditDescriptionInput] = useState(false);\n  const methods = useContext(MethodsContext);\n\n  const addDescription = () => {\n    if (inputNewDescription) {\n      methods?.addNewDecription(columnId, cardId, inputNewDescription);\n      setInputNewDescription(\"\");\n    }\n    setEditDescriptionInput(false);\n  };\n\n  const descriptionHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewDescription(e.target.value);\n  };\n\n  return (\n    <Modal.Body className=\"card-options__body\">\n      <div className=\"description-title\">\n        <h3>Описание </h3>\n        <div className=\"header__icons\">\n          <PencilFill\n            className=\"icon-edit\"\n            size={17}\n            onClick={() => setEditDescriptionInput(true)}\n          />\n          <TrashFill\n            className=\"icon-delete\"\n            size={17}\n            onClick={() => methods?.deleteDescription(columnId, cardId)}\n          />\n        </div>\n      </div>\n\n      {description && !editDescriptionInput ? (\n        <>\n          <p>{description}</p>\n        </>\n      ) : (\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"basic-url\"\n            placeholder=\"Добавить описание...\"\n            aria-label=\"Добавить описание...\"\n            aria-describedby=\"basic-addon2\"\n            onChange={descriptionHandleChange}\n            value={inputNewDescription}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-success\" onClick={addDescription}>\n              Сохранить\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      )}\n    </Modal.Body>\n  );\n};\n\nexport default DescriptionSection;\n","import React, { useState, useContext } from \"react\";\n\nimport { Modal } from \"react-bootstrap\";\nimport { MethodsContext } from \"../../App\";\n\nimport { PencilFill } from \"react-bootstrap-icons\";\nimport { TrashFill } from \"react-bootstrap-icons\";\n\nimport \"./card-title-sectin.styles.scss\";\n\ninterface CardTitleSectionProps {\n  cardName: string;\n  cardId: string;\n  columnId: string;\n  columnName: string;\n}\n\nconst CardTitleSection: React.FC<CardTitleSectionProps> = ({\n  cardName,\n  cardId,\n  columnId,\n  columnName,\n}) => {\n  return (\n    <Modal.Header closeButton>\n      <Modal.Title\n        id=\"contained-modal-title-vcenter\"\n        className=\"header__container\"\n      >\n        <p>\n          {columnName} &gt; {cardName}\n        </p>\n        <div className=\"header__icons\">\n          <PencilFill className=\"icon-edit\" size={20} />\n          <TrashFill className=\"icon-delete\" size={20} />\n        </div>\n      </Modal.Title>\n    </Modal.Header>\n  );\n};\n\nexport default CardTitleSection;\n","import React from \"react\";\n\nimport { Modal } from \"react-bootstrap\";\n\nimport CommentsSection from \"../comments-section/comments-section.component\";\nimport DescriptionSection from \"../description-section/description-section.component\";\nimport CardTitleSection from \"../card-title-section/card-title-section.component\";\n\nimport \"./card-options.styles.scss\";\n\ninterface CardOptionsProps {\n  cardName: string;\n  cardId: string;\n  columnId: string;\n  description: string;\n  columnName: string;\n  comments: { name: string; text: string; id: string }[];\n  show: boolean;\n  onHide: () => void;\n}\n\nconst CardOptions: React.FC<CardOptionsProps> = ({\n  cardName,\n  show,\n  onHide,\n  description,\n  columnName,\n  comments,\n  cardId,\n  columnId,\n}) => {\n  return (\n    <div onClick={(e) => e.stopPropagation()}>\n      <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <CardTitleSection\n          cardId={cardId}\n          columnId={columnId}\n          cardName={cardName}\n          columnName={columnName}\n        />\n        <DescriptionSection\n          description={description}\n          cardId={cardId}\n          columnId={columnId}\n        />\n        <CommentsSection\n          comments={comments}\n          cardId={cardId}\n          columnId={columnId}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default CardOptions;\n","import React, { useState } from \"react\";\n\nimport Comments from \"../../assets/comments.svg\";\nimport CardOptions from \"../card-options/card-options.component\";\n\nimport \"./card.styles.scss\";\n\ninterface CardProps {\n  cardName: string;\n  cardId: string;\n  columnName: string;\n  columnId: string;\n  description: string;\n  comments: { name: string; text: string; id: string }[];\n}\n\nconst Card: React.FC<CardProps> = ({\n  cardName,\n  comments,\n  description,\n  columnName,\n  cardId,\n  columnId,\n}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <div className=\"card__wrapper\" onClick={handleShow}>\n      <p>{cardName}</p>\n\n      {comments.length ? (\n        <div className=\"comments-icon\">\n          <img src={Comments} alt=\"comments\" />\n          <p className=\"comments-icon__text\">{comments.length}</p>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <CardOptions\n        cardName={cardName}\n        columnName={columnName}\n        show={show}\n        onHide={handleClose}\n        description={description}\n        comments={comments}\n        columnId={columnId}\n        cardId={cardId}\n      />\n    </div>\n  );\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/plus.05989119.svg\";","import React, { useState, useContext } from \"react\";\n\nimport { FormControl, Form, Button } from \"react-bootstrap\";\n\nimport Card from \"../card/card.component\";\nimport { MethodsContext } from \"../../App\";\n\nimport \"./card-list.styles.scss\";\nimport Plus from \"../../assets/plus.svg\";\n\ninterface CardProps {\n  item: {\n    id: string;\n    columnName: string;\n    cards: {\n      id: string;\n      cardName: string;\n      description: string;\n      comments: { name: string; text: string; id: string }[];\n    }[];\n  };\n}\n\nconst CardList: React.FC<CardProps> = ({ item }) => {\n  const [show, setShow] = useState(false);\n  const [inputColumnName, setInputColumnName] = useState(\"\");\n  const [inputNewCard, setInputNewCard] = useState(\"\");\n  const [columnNameHidden, setColumnNameHidden] = useState(false);\n\n  const methods = useContext(MethodsContext);\n\n  const hideColumnName = (): void => {\n    setColumnNameHidden(true);\n  };\n\n  const showColumnName = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      setColumnNameHidden(false);\n      if (inputColumnName) {\n        methods?.editColumnName(item.id, inputColumnName);\n      }\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputColumnName(e.target.value);\n  };\n\n  const showNewCardInput = (): void => {\n    setShow(true);\n  };\n\n  const newCardHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (inputNewCard) {\n      methods?.addNewCard(item.id, inputNewCard);\n      setInputNewCard(\"\");\n      setShow(false);\n    }\n    setShow(false);\n  };\n\n  const NewCardHandleChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setInputNewCard(e.target.value);\n  };\n\n  return (\n    <div className=\"card-list__wrapper\">\n      {columnNameHidden ? (\n        <FormControl\n          autoFocus\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n          placeholder={item.columnName}\n          onChange={handleChange}\n          onKeyPress={showColumnName}\n        />\n      ) : (\n        <h4 onClick={hideColumnName}>{item.columnName}</h4>\n      )}\n\n      {item.cards.map(\n        (i: {\n          id: string;\n          cardName: string;\n          description: string;\n          comments: { name: string; text: string; id: string }[];\n        }) => {\n          return (\n            <Card\n              key={i.id}\n              cardName={i.cardName}\n              description={i.description}\n              comments={i.comments}\n              columnName={item.columnName}\n              columnId={item.id}\n              cardId={i.id}\n            />\n          );\n        }\n      )}\n\n      {show ? (\n        <Form onSubmit={newCardHandler} className=\"card-list__form\">\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Заголовок карточки\"\n              autoFocus\n              onChange={NewCardHandleChange}\n            />\n          </Form.Group>\n          <Button variant=\"success\" type=\"submit\">\n            Добавить карточку\n          </Button>\n        </Form>\n      ) : (\n        <button className=\"card-list__new-card\" onClick={showNewCardInput}>\n          <img src={Plus} alt=\"plus\" />\n          Добавить карточку\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nimport CardList from \"../card-list/card-list.component\";\nimport Plus from \"../../assets/plus.svg\";\n\nimport \"./board.styles.scss\";\n\ninterface BoardProps {\n  username: string;\n  data: {\n    id: string;\n    columnName: string;\n    cards: {\n      id: string;\n      cardName: string;\n      description: string;\n      comments: { name: string; text: string; id: string }[];\n    }[];\n  }[];\n}\n\nconst Board: React.FC<BoardProps> = ({ username, data }) => {\n  return (\n    <div className=\"board__wrapper\">\n      {data.map((item) => {\n        return <CardList key={item.id} item={item} />;\n      })}\n\n      <div className=\"board__new-card\">\n        <img src={Plus} alt=\"plus\" />\n        Добавить еще одну колонку\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport CustomModal from \"./components/custom-popup/custom-popup.component\";\nimport Board from \"./components/board/board.component\";\n\nimport \"./App.css\";\n\ninterface MethodsContextInterface {\n  editColumnName: (id: string, newValue: string) => void;\n  addNewCard: (id: string, newValue: string) => void;\n  addNewComment: (columnId: string, cardId: string, value: string) => void;\n  addNewDecription: (columnId: string, cardId: string, value: string) => void;\n  deleteDescription: (columnId: string, cardId: string) => void;\n}\n\nexport const MethodsContext = React.createContext<\n  MethodsContextInterface | undefined\n>(undefined);\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState(\"\");\n  const [modalShow, setModalShow] = useState(true);\n\n  const [boardData, setBoardData] = useState([\n    {\n      id: nanoid(),\n      columnName: \"TODO\",\n      cards: [\n        {\n          cardName: \"create page\",\n          id: nanoid(),\n          description: `Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consectetur repellendus, nesciunt similique ratione neque aspernatur consequatur veniam exercitationem nostrum quo laborum ipsa, esse nihil pariatur. Ex quasi explicabo fugit unde.`,\n          comments: [\n            { name: \"Jessy\", text: \"LOL\", id: nanoid() },\n            {\n              name: \"Nancy\",\n              text: \"Is this lorem ipsum??? Where is real description?\",\n              id: nanoid(),\n            },\n          ],\n        },\n        {\n          cardName: \"add feature\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n        { cardName: \"deploy\", id: nanoid(), description: \"\", comments: [] },\n      ],\n    },\n    {\n      id: nanoid(),\n      columnName: \"In Progress\",\n      cards: [\n        {\n          cardName: \"design for new page\",\n          id: nanoid(),\n          description: \"\",\n          comments: [\n            {\n              name: \"Michael Scott\",\n              text: \"NO... no no no please no\",\n              id: nanoid(),\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: nanoid(),\n      columnName: \"Testing\",\n      cards: [\n        {\n          cardName: \"write unit tests\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n        {\n          cardName: \"hand testing\",\n          id: nanoid(),\n          description: \"\",\n          comments: [{ name: \"Chief\", text: \"good luck!\", id: nanoid() }],\n        },\n      ],\n    },\n    {\n      id: nanoid(),\n      columnName: \"Done\",\n      cards: [\n        {\n          cardName: \"create architecture\",\n          id: nanoid(),\n          description: \"\",\n          comments: [],\n        },\n      ],\n    },\n  ]);\n\n  useEffect(() => {\n    let storageNameValue = localStorage.getItem(\"username\");\n    if (storageNameValue) {\n      setUser(storageNameValue);\n    }\n    let storageBoardValue = localStorage.getItem(\"board\");\n    if (storageBoardValue) {\n      setBoardData(JSON.parse(storageBoardValue));\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"board\", JSON.stringify(boardData));\n  // }, [boardData]);\n\n  const setUserName = (value: string): void => {\n    setUser(value);\n    localStorage.setItem(\"username\", value);\n  };\n\n  const editColumnName = (id: string, newValue: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === id) {\n          item.columnName = newValue;\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewCard = (id: string, newValue: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === id) {\n          item.cards.push({\n            cardName: newValue,\n            id: nanoid(),\n            description: \"\",\n            comments: [],\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewComment = (\n    columnId: string,\n    cardId: string,\n    value: string\n  ): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.comments.push({ name: user, text: value, id: nanoid() });\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const addNewDecription = (\n    columnId: string,\n    cardId: string,\n    value: string\n  ) => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.description = value;\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const deleteDescription = (columnId: string, cardId: string): void => {\n    setBoardData(\n      boardData.map((item) => {\n        if (item.id === columnId) {\n          item.cards.map((card) => {\n            if (card.id === cardId) {\n              card.description = \"\";\n            }\n            return card;\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {user ? (\n        <MethodsContext.Provider\n          value={{\n            editColumnName,\n            addNewCard,\n            addNewComment,\n            addNewDecription,\n            deleteDescription,\n          }}\n        >\n          <Board username={user} data={boardData} />\n        </MethodsContext.Provider>\n      ) : (\n        <CustomModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          setUserName={setUserName}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}